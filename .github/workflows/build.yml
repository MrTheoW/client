name: Build
on:
  workflow_run:
    workflows: ["Init"]
    types:
      - completed

jobs:
  build-linux-and-android:
    runs-on: ubuntu-20.04
    steps:
      - name: Install packages
        run: sudo apt install axel libasound2-dev libavcodec-dev libavformat-dev libavutil-dev libgl-dev libgtk-3-dev libpango1.0-dev libxtst-dev xdg-utils libc6 xdg-utils zlib1g libpng16-16 libasound2 libbsd-dev zip libblkid1 libdbus-1-3 libexpat1 libgpg-error0 liblzma5 libmount1 libpcre3 libselinux1 libsystemd0 libuuid1
      - uses: actions/checkout@v2
      - name: Setup java
        uses: joschi/setup-jdk@v2
        with:
          java-version: 16
      - name: Setup JavaFX
        run: |
          cd /tmp
          axel -n 8 https://download2.gluonhq.com/openjfx/17/openjfx-17-ea+11_linux-x64_bin-jmods.zip
          unzip /tmp/openjfx-17-ea+11_linux-x64_bin-jmods.zip -d /tmp
      - name: Download GraalVM 21.1.0
        run: |
          cd /tmp
          axel -n 8 https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-21.1.0/graalvm-ce-java11-linux-amd64-21.1.0.tar.gz
          tar -xvzf *.gz
      - name: Install native-image
        run: |
          cd /tmp/graalvm-ce-java11-21.1.0/bin
          ./gu install native-image
      - name: Download built jars
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: init.yml
          name: built-jars
          path: target/lib/
      - name: Download REQ_MODULES
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: init.yml
          name: req_modules
      - name: Download VERSION
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: init.yml
          name: version
      - name: Add VERSION to environment
        run: |
          echo "VERSION=$(<version.txt)" >> $GITHUB_ENV
      - name: Add REQ_MODULES to environment
        run: |
          echo "REQ_MODULES=$(<req_modules.txt)" >> $GITHUB_ENV
      - name: Create Linux x64 DEB, Linux x64 APP IMAGE, Android aarch64 APK, Linux Arm32 ZIP
        run: |
          # Create DEB
          .github/scripts/jpackage.sh \
          --icon assets/linux-icon.png \
          --app-version ${{ env.VERSION }} \
          --linux-menu-group "Stream-Pi" \
          --license-file LICENSE.txt \
          --type deb

          # Create App Image
          .github/scripts/jpackage.sh \
          --icon assets/linux-icon.png \
          --app-version ${{ env.VERSION }} \
          --type app-image

          export GRAALVM_HOME=/tmp/graalvm-ce-java11-21.1.0/
          mvn -Pandroid gluonfx:build gluonfx:package
          mv target/gluonfx/aarch64-android/gvm/*.apk ${{ env.INSTALL_DIR }}/stream-pi-client-android-aarch64-${{ env.VERSION }}.apk

          cd $INSTALL_DIR
          mv *.deb stream-pi-client-linux-x64-${{ env.VERSION }}-debian.deb
          mv 'Stream-Pi Client' stream-pi-client-${{ env.VERSION }}
          zip -r stream-pi-client-linux-x64-${{ env.VERSION }}-executable.zip stream-pi-client-${{ env.VERSION }}
          rm -r stream-pi-client-${{ env.VERSION }}
        env:
          MAIN_CLASS: com.stream_pi.client.Main
          JAVAFX_JMODS: /tmp/javafx-jmods-17/
          JPACKAGE_HOME: ${{ env.JAVA_HOME }}
          INSTALL_DIR: target/install
      - name: Saving Linux x64 DEB
        uses: actions/upload-artifact@v2
        with:
          name: linux-deb
          path: target/install/stream-pi-client-linux-x64-${{ env.VERSION }}-debian.deb
      - name: Saving Linux x64 ZIP
        uses: actions/upload-artifact@v2
        with:
          name: linux-zip
          path: target/install/stream-pi-client-linux-x64-${{ env.VERSION }}-executable.zip
      - name: Saving Android aarch64 APK
        uses: actions/upload-artifact@v2
        with:
          name: android-apk
          path: target/install/*.apk
  
  build-macos:
    runs-on: macos-10.15
    steps:
      - uses: actions/checkout@v2
      - name: Setup java
        uses: joschi/setup-jdk@v2
        with:
          java-version: 16
      - name: Setup JavaFX
        run: |
          wget -P /tmp https://download2.gluonhq.com/openjfx/17/openjfx-17-ea+11_linux-x64_bin-jmods.zip
          unzip /tmp/openjfx-17-ea+11_linux-x64_bin-jmods.zip -d /tmp
      - name: Download built jars
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: init.yml
          name: built-jars
          path: target/lib/
      - name: Download REQ_MODULES
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: init.yml
          name: req_modules
      - name: Download VERSION
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: init.yml
          name: version
      - name: Add VERSION to environment
        run: |
          echo "VERSION=$(<version.txt)" >> $GITHUB_ENV
      - name: Add REQ_MODULES to environment
        run: |
          echo "REQ_MODULES=$(<req_modules.txt)" >> $GITHUB_ENV
      - name: Create DMG
        run: |
          # Create DMG
          .github/scripts/jpackage.sh \
          --icon assets/macos-icon.icns \
          --license-file LICENSE.txt \
          --type dmg

          cd $INSTALL_DIR
          mv *.dmg stream-pi-client-macos-x64-${{ env.VERSION }}.dmg
        env:
          MAIN_CLASS: com.stream_pi.client.Main
          JAVAFX_JMODS: /tmp/javafx-jmods-17/
          JPACKAGE_HOME: ${{ env.JAVA_HOME }}
          INSTALL_DIR: target/install
      - name: Saving MacOS x64 DMG
        uses: actions/upload-artifact@v2
        with:
          name: macos-dmg
          path: target/install/stream-pi-client-macos-x64-${{ env.VERSION }}.dmg

  build-windows:
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v2
      - name: Setup java
        uses: joschi/setup-jdk@v2
        with:
          java-version: 16
      - name: Download REQ_MODULES
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: init.yml
          name: req_modules
      - name: Download VERSION
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: init.yml
          name: version
      - name: Setup JavaFX
        run: |
          bitsadmin /Transfer DownloadJavaFX https://download2.gluonhq.com/openjfx/17/openjfx-17-ea+11_windows-x64_bin-jmods.zip D:\openjfx-17-ea+11_windows-x64_bin-jmods.zip
          Expand-Archive -Force D:\openjfx-17-ea+11_windows-x64_bin-jmods.zip D:\
      - name: Download built jars
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: init.yml
          name: built-jars
          path: target/lib/
      - name: Create Bundle using JPackage
        id: project
        shell: cmd
        run: |
          call .github\scripts\jpackage.bat
        env:
          MAIN_CLASS: com.stream_pi.client.Main
          JAVAFX_JMODS: D:\javafx-jmods-17\
          JPACKAGE_HOME: ${{ env.JAVA_HOME }}
          INSTALL_DIR: target/install
      - name: Saving Windows x64 EXE
        uses: actions/upload-artifact@v2
        with:
          name: windows-msi
          path: target/install/*.msi

  armv32_job:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2.1.0
      - name: Download built jars
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: init.yml
          name: built-jars
          path: target/lib/
      - uses: uraimo/run-on-arch-action@v2.0.5
        name: Build & save Linux ARM32 ZIP
        with:
          arch: armv6
          distro: buster

          run: |
            sudo apt update
            sudo apt install axel unzip zip

            INSTALL_DIR=target/install
            mkdir -p $INSTALL_DIR
            mv target/lib/* $INSTALL_DIR
            axel -n 8 https://download2.gluonhq.com/openjfx/17/openjfx-17-ea+11_linux-arm32_bin-sdk.zip
            unzip openjfx-17-ea+11_linux-arm32_bin-sdk.zip -d javafx-sdk-arm32
            mv javafx-sdk-arm32/javafx-sdk-17/legal javafx-sdk-arm32/javafx-sdk-17/javafx-legal
            mv javafx-sdk-arm32/javafx-sdk-17/lib/libgluon_drm* javafx-sdk-arm32/javafx-sdk-17/lib/libgluon_drm.so
            mv javafx-sdk-arm32/javafx-sdk-17/lib/* $INSTALL_DIR/
            cp assets/arm32-launchers/run_console $INSTALL_DIR/run_console
            cp assets/arm32-launchers/run_desktop $INSTALL_DIR/run_desktop
            chmod +x $INSTALL_DIR/run_desktop
            chmod +x $INSTALL_DIR/run_console

            #Download jdk
            axel -n 8 https://cdn.azul.com/zulu-embedded/bin/zulu11.48.21-ca-jdk11.0.11-linux_aarch32hf.tar.gz
            tar -xvzf zulu11.48.21-ca-jdk11.0.11-linux_aarch32hf.tar.gz

            #Run jpackage
            zulu11.48.21-ca-jdk11.0.11-linux_aarch32hf/bin/jlink  --no-header-files --no-man-pages --add-modules java.base,java.logging,java.net.http,java.scripting,jdk.jsobject,jdk.unsupported,jdk.unsupported.desktop,jdk.xml.dom,java.xml,java.management,jdk.localedata,java.sql,jdk.crypto.ec --output $INSTALL_DIR/jre

            cd $INSTALL_DIR
            zip -r stream-pi-client-linux-arm32-${{ env.VERSION }}-executable.zip *

      - name: Saving Linux ARM32 ZIP
        uses: actions/upload-artifact@v2
        with:
          name: linux-arm32-zip
          path: target/install/stream-pi-client-linux-arm32-${{ env.VERSION }}-executable.zip